import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { sha256 as sha256_js } from 'js-sha256';

// Declara√ß√µes de tipo para Utmify
declare global {
  interface Window {
    utmifyLoaded?: boolean;
    utmify?: {
      getUtmParams?: () => {
        utm_source?: string;
        utm_campaign?: string;
        utm_medium?: string;
        utm_content?: string;
        utm_term?: string;
      };
    };
  }
}

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Fun√ß√£o utilit√°ria para SHA256
 */
export function sha256(value: string | undefined): string | undefined {
  if (value === undefined || value === null) {
    return undefined;
  }
  // Usa a biblioteca js-sha256 para o hash
  return sha256_js(value.trim().toLowerCase());
}

/**
 * Fun√ß√£o utilit√°ria para criar cookies
 */
export function setCookie(name: string, value: string, days = 7) {
  if (typeof document !== 'undefined') {
    const expires = new Date(Date.now() + days * 864e5).toUTCString();
    document.cookie = `${name}=${encodeURIComponent(value)}; expires=${expires}; path=/`;
  }
}

/**
 * Fun√ß√£o utilit√°ria para capturar par√¢metros UTM (simplificada)
 * Retorna objeto vazio pois o tracking √© feito por script externo
 */
export function getUtmParams() {
  console.log('üîç [UTM] Par√¢metros UTM gerenciados por script externo');
  
  return {
    utm_source: '',
    utm_campaign: '',
    utm_medium: '',
    utm_content: '',
    utm_term: ''
  };
}

/**
 * Fun√ß√£o para verificar se h√° par√¢metros UTM v√°lidos (simplificada)
 * Sempre retorna false pois o tracking √© feito por script externo
 */
export function hasValidUtmParams() {
  return false;
}

/**
 * Fun√ß√£o para construir uma URL com par√¢metros UTM (simplificada)
 * Retorna apenas a URL base pois o tracking √© feito por script externo
 */
export function buildUrlWithUtm(baseUrl: string, additionalParams?: Record<string, string>) {
  console.log('üîç [UTM] URL constru√≠da sem par√¢metros UTM (gerenciado por script externo)');
  return baseUrl;
}

/**
 * Fun√ß√£o para construir URL do Hotmart (simplificada)
 */
export function buildHotmartUrl(params: any, eventId: string) {
  const baseUrl = 'https://pay.hotmart.com/D98080625O?off=1n1vmmyz&checkoutMode=10';
  
  console.log('üîç [HOTMART] URL gerada:', baseUrl);
  
  return baseUrl;
}

/**
 * Fun√ß√£o para ler o valor de um cookie
 */
export function getCookie(name: string): string | null {
  if (typeof document === 'undefined') {
    return null;
  }
  const match = document.cookie.match(new RegExp('(^|;) *' + name + '=([^;]+)'));
  return match ? match[2] : null;
}

/**
 * Fun√ß√£o para obter o endere√ßo IP do cliente, com prioridade para IPv6.
 * Tenta buscar o IPv6 de um endpoint espec√≠fico. Se falhar, usa o ipinfo.io como fallback.
 */
export async function getClientIP(): Promise<string | null> {
  try {
    // Tenta obter o IPv6 primeiro por ser mais preciso para geolocaliza√ß√£o
    const response = await fetch('https://api6.ipify.org?format=json');
    if (response.ok) {
      const data = await response.json();
      if (data.ip) {
        console.log('‚úÖ [DEBUG] IPv6 obtido com sucesso:', data.ip);
        return data.ip;
      }
    }
  } catch (error) {
    console.warn('[DEBUG] Falha ao obter IPv6. Tentando fallback.', error);
  }

  // Fallback para o servi√ßo ipinfo.io (que pode retornar IPv4 ou IPv6)
  try {
    const response = await fetch('https://ipinfo.io/json?token=1ad4cf7c8cc087');
    if (response.ok) {
      const data = await response.json();
      if (data.ip) {
        console.log('üîÑ [DEBUG] Usando IP de fallback (ipinfo.io):', data.ip);
        return data.ip;
      }
    }
  } catch (error) {
    console.error('‚ùå [DEBUG] Falha ao obter IP de fallback (ipinfo.io).', error);
  }

  return null;
}
